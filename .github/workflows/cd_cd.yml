name: CI/CD Pipeline - Terraform & ECS Deploy

on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
  pull_request:
    branches:
      - '**'

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY_NAME: app-repo

jobs:
  terraform_local_checks:
    name: 'Terraform Local Checks'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.x

      - name: Install TFLint
        run: |
          TFLINT_VERSION=$(curl -s https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep "tag_name" | cut -d : -f 2 | tr -d " \",v")
          curl -sL "https://github.com/terraform-linters/tflint/releases/download/v${TFLINT_VERSION}/tflint_linux_amd64.zip" -o tflint.zip
          unzip tflint.zip
          sudo mv tflint /usr/local/bin/tflint
          tflint --version
        shell: bash

      - name: Terraform Init (Local Backend)
        id: init
        run: terraform init
        shell: bash

      - name: Terraform Format Check
        run: terraform fmt --check
        shell: bash

      - name: Terraform Validate
        run: terraform validate
        shell: bash

      - name: Run TFLint
        run: tflint --recursive
        shell: bash
        continue-on-error: true

  docker_build_and_push:
    name: 'Build and Push Docker Image'
    runs-on: ubuntu-latest
    environment: env
    needs: [terraform_local_checks]
    permissions:
      contents: read
      id-token: write
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY_URL: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          FULL_IMAGE_NAME: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:${{ github.sha }}
        run: |
          cd rest-app
          echo "Building Docker image: $FULL_IMAGE_NAME"
          docker build -t $FULL_IMAGE_NAME .
          echo "Pushing Docker image: $FULL_IMAGE_NAME"
          docker push $FULL_IMAGE_NAME
          echo "::set-output name=image::$FULL_IMAGE_NAME"

  terraform_deploy:
    name: 'Terraform Plan & Apply'
    runs-on: ubuntu-latest
    needs: [docker_build_and_push]
    environment: production
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      - name: Terraform Init
        id: init_deploy
        run: terraform init

      - name: Get Terraform Outputs
        id: get_outputs_deploy
        run: |
          echo "ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=$(terraform output -raw ecs_service_name)" >> $GITHUB_ENV
          echo "CONTAINER_APP_NAME=$(terraform output -raw project_name)-app" >> $GITHUB_ENV
        env:
          TF_INPUT: "false"

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        env:
          TF_INPUT: "false"

      - name: Upload Terraform Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan
          retention-days: 1

      - name: Terraform Apply
        id: apply
        run: |
          echo "Applying Terraform plan..."
          terraform apply -auto-approve tfplan
        env:
          TF_INPUT: "false"

      - name: Update ECS service with new image
        run: |
          CURRENT_TASK_DEFINITION_ARN=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --services ${{ env.ECS_SERVICE_NAME }} \
            --query 'services[0].taskDefinition' \
            --output text)

          echo "Current Task Definition ARN: $CURRENT_TASK_DEFINITION_ARN"
          echo "Updating ECS service ${{ env.ECS_SERVICE_NAME }} in cluster ${{ env.ECS_CLUSTER_NAME }} with new image: ${{ needs.docker_build_and_push.outputs.image }}"

          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --service ${{ env.ECS_SERVICE_NAME }} \
            --force-new-deployment \
            --task-definition $CURRENT_TASK_DEFINITION_ARN \
            --container-overrides '[{"name":"${{ env.CONTAINER_APP_NAME }}", "image":"${{ needs.docker_build_and_push.outputs.image }}"}]'